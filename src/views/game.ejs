<!DOCTYPE html>
<html>
<head>
    <title>KBC Quiz Game - <%= topic %></title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap');

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: radial-gradient(circle at center, #000066 0%, #000033 100%);
            color: white;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 20px;
            position: relative;
            overflow-x: hidden;
        }

        .datetime-display {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.5);
            padding: 10px 20px;
            border-radius: 10px;
            text-align: right;
            font-size: 1.1em;
            color: #ffdd00;
            border: 1px solid rgba(255, 221, 0, 0.3);
            backdrop-filter: blur(5px);
            z-index: 1000;
        }

        #current-time {
            font-size: 1.2em;
            font-weight: 600;
            margin-bottom: 5px;
        }

        #current-date {
            font-size: 0.9em;
            opacity: 0.9;
        }

        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="50" r="1" fill="rgba(255,255,255,0.2)"/></svg>') repeat;
            opacity: 0.1;
            z-index: -1;
            animation: twinkle 3s infinite alternate;
        }

        @keyframes twinkle {
            0% { opacity: 0.05; }
            100% { opacity: 0.15; }
        }

        .game-container {
            background: linear-gradient(145deg, rgba(0,0,102,0.9) 0%, rgba(0,0,153,0.9) 100%);
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 0 30px rgba(0,0,255,0.2);
            max-width: 900px;
            width: 100%;
            position: relative;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.1);
        }

        .game-info {
            text-align: center;
            margin-bottom: 30px;
            padding: 15px;
            background: rgba(0,0,0,0.3);
            border-radius: 10px;
            border: 1px solid rgba(255,255,255,0.1);
        }

        .topic {
            font-size: 1.4em;
            font-weight: 600;
            color: #ffdd00;
            margin-bottom: 15px;
            text-align: center;
            text-shadow: 0 0 10px rgba(255,221,0,0.3);
        }

        .topic-specification {
            font-size: 0.9em;
            color: #fff;
            opacity: 0.9;
            display: block;
            margin-top: 5px;
        }

        .prize-money {
            color: #ffdd00;
            font-weight: 700;
            font-size: 1.5em;
            text-shadow: 0 0 10px rgba(255,221,0,0.5);
        }

        .question {
            font-size: 1.5em;
            margin-bottom: 30px;
            text-align: center;
            padding: 20px;
            background: rgba(0,0,0,0.3);
            border-radius: 15px;
            line-height: 1.4;
            border: 1px solid rgba(255,255,255,0.1);
        }

        .options {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-bottom: 20px;
        }

        .option {
            background: linear-gradient(145deg, #000080 0%, #000066 100%);
            padding: 15px 20px;
            border: 2px solid rgba(255,255,255,0.1);
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .option:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,255,0.3);
            border-color: rgba(255,255,255,0.3);
        }

        .option::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(
                90deg,
                transparent,
                rgba(255,255,255,0.1),
                transparent
            );
            transition: 0.5s;
        }

        .option:hover::before {
            left: 100%;
        }

        .selected {
            background: linear-gradient(145deg, #0000cc 0%, #0000a6 100%);
            border-color: #ffdd00;
        }

        .correct {
            background: linear-gradient(145deg, #008800 0%, #006600 100%);
            border-color: #00ff00;
            animation: pulse-green 1s infinite;
        }

        .incorrect {
            background: linear-gradient(145deg, #880000 0%, #660000 100%);
            border-color: #ff0000;
            animation: shake 0.5s;
        }

        @keyframes pulse-green {
            0% { box-shadow: 0 0 0 0 rgba(0,255,0,0.4); }
            70% { box-shadow: 0 0 0 10px rgba(0,255,0,0); }
            100% { box-shadow: 0 0 0 0 rgba(0,255,0,0); }
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }

        #message {
            text-align: center;
            margin-top: 20px;
            font-size: 1.2em;
            font-weight: 600;
            min-height: 30px;
            color: #ffdd00;
            text-shadow: 0 0 10px rgba(255,221,0,0.3);
        }

        .results-container {
            background: linear-gradient(145deg, rgba(0,0,102,0.95) 0%, rgba(0,0,153,0.95) 100%);
            padding: 30px;
            border-radius: 20px;
            max-width: 900px;
            width: 100%;
            margin: 20px auto;
            display: none;
        }

        .results-header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: rgba(0,0,0,0.3);
            border-radius: 15px;
        }

        .results-header h2 {
            color: #ffdd00;
            font-size: 2em;
            margin-bottom: 15px;
            text-shadow: 0 0 10px rgba(255,221,0,0.5);
        }

        .question-review {
            background: rgba(0,0,0,0.2);
            margin-bottom: 20px;
            padding: 20px;
            border-radius: 10px;
            border-left: 5px solid;
            transition: transform 0.3s ease;
        }

        .question-review:hover {
            transform: translateX(5px);
        }

        .question-review.correct {
            border-left-color: #00ff00;
        }

        .question-review.incorrect {
            border-left-color: #ff0000;
        }

        .answer-status {
            margin-top: 10px;
            font-weight: 600;
            padding: 5px 10px;
            border-radius: 5px;
            display: inline-block;
        }

        .answer-status.correct {
            background: rgba(0,255,0,0.2);
            color: #00ff00;
        }

        .answer-status.incorrect {
            background: rgba(255,0,0,0.2);
            color: #ff0000;
        }

        .play-again {
            display: block;
            margin: 30px auto 0;
            padding: 15px 40px;
            background: linear-gradient(145deg, #0000cc 0%, #0000a6 100%);
            color: white;
            border: 2px solid rgba(255,255,255,0.1);
            border-radius: 10px;
            cursor: pointer;
            font-size: 1.2em;
            font-weight: 600;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .play-again:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,255,0.3);
            border-color: #ffdd00;
        }

        @media (max-width: 768px) {
            .options {
                grid-template-columns: 1fr;
            }
            
            .game-container {
                padding: 20px;
            }
            
            .question {
                font-size: 1.2em;
            }
        }
    </style>
</head>
<body>
    <div class="datetime-display">
        <div id="current-time"></div>
        <div id="current-date"></div>
    </div>
    <div class="game-container">
        <div class="game-info">
            <div class="topic">
                Topic: <%= topic %><br>
                <span class="topic-specification">Focus: <%= topicSpecification %></span>
            </div>
            <p>Question <span id="questionNumber"><%= currentQuestion %></span> of <%= totalQuestions %></p>
            <div class="prize-money">Prize: ₹<%= prizeMoney.toLocaleString() %></div>
        </div>
        
        <div class="question" id="question"><%= question %></div>
        
        <div class="options" id="options">
            <% options.forEach((option, index) => { %>
                <div class="option" onclick="selectOption(this, '<%= String.fromCharCode(65 + index) %>')">
                    <%= String.fromCharCode(65 + index) %>. <%= option %>
                </div>
            <% }); %>
        </div>
        
        <div id="message"></div>
    </div>

    <div id="results" class="results-container">
        <div class="results-header">
            <h2>Game Results</h2>
            <p>Topic: <span id="resultTopic"></span></p>
            <p>Final Score: ₹<span id="finalScore"></span></p>
        </div>
        <div id="questionsReview"></div>
        <button class="play-again" onclick="window.location.href='/'">Play Again</button>
    </div>

    <script>
        let selectedOption = null;
        let isProcessing = false;

        // Update date and time
        function updateDateTime() {
            const now = new Date();
            
            // Format time
            const timeOptions = { 
                hour: '2-digit', 
                minute: '2-digit', 
                second: '2-digit', 
                hour12: true 
            };
            document.getElementById('current-time').textContent = now.toLocaleTimeString('en-US', timeOptions);
            
            // Format date
            const dateOptions = { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            };
            document.getElementById('current-date').textContent = now.toLocaleDateString('en-US', dateOptions);
        }

        // Update immediately and then every second
        updateDateTime();
        setInterval(updateDateTime, 1000);

        function selectOption(element, option) {
            if (isProcessing) return;
            
            // Reset previous selection
            document.querySelectorAll('.option').forEach(opt => {
                opt.classList.remove('selected');
            });
            
            // Select new option
            element.classList.add('selected');
            selectedOption = option;

            // Check answer after a brief delay
            setTimeout(() => checkAnswer(option), 1000);
        }

        async function checkAnswer(selectedAnswer) {
            if (isProcessing) return;
            isProcessing = true;

            try {
                const response = await fetch('/check-answer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        sessionId: '<%= sessionId %>',
                        selectedAnswer: selectedAnswer,
                        correctAnswer: '<%= correctOption %>'
                    })
                });

                const data = await response.json();
                
                // Get the selected option element
                const selectedElement = document.querySelector('.option.selected');
                
                // Find the correct option element
                const correctElement = document.querySelector(`.option:nth-child(${['A','B','C','D'].indexOf('<%= correctOption %>') + 1})`);
                
                if (data.correct) {
                    selectedElement.classList.add('correct');
                    document.getElementById('message').textContent = 'Correct! Well done!';
                } else {
                    selectedElement.classList.add('incorrect');
                    correctElement.classList.add('correct');
                    document.getElementById('message').textContent = 'Sorry, that\'s incorrect.';
                }

                // Disable all options after answer is checked
                document.querySelectorAll('.option').forEach(opt => {
                    opt.style.pointerEvents = 'none';
                });

                if (data.gameComplete) {
                    setTimeout(() => showResults(data.results), 2000);
                } else {
                    setTimeout(() => {
                        // Update question and options
                        document.getElementById('question').textContent = data.nextQuestion.question;
                        document.getElementById('questionNumber').textContent = data.nextQuestion.currentQuestion;
                        document.querySelector('.prize-money').textContent = data.nextQuestion.prizeMoney.toLocaleString();
                        
                        // Update options
                        const options = document.querySelectorAll('.option');
                        data.nextQuestion.options.forEach((option, index) => {
                            options[index].textContent = `${String.fromCharCode(65 + index)}. ${option}`;
                        });
                        
                        // Reset styles
                        options.forEach(opt => {
                            opt.classList.remove('selected', 'correct', 'incorrect');
                            opt.style.pointerEvents = 'auto';
                        });
                        
                        document.getElementById('message').textContent = '';
                        isProcessing = false;
                    }, 2000);
                }
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('message').textContent = 'An error occurred. Please try again.';
                isProcessing = false;
            }
        }

        function showResults(results) {
            // Hide game container and show results
            document.querySelector('.game-container').style.display = 'none';
            const resultsContainer = document.getElementById('results');
            resultsContainer.style.display = 'block';
            
            // Update results header
            document.getElementById('resultTopic').textContent = results.topic;
            document.getElementById('finalScore').textContent = results.finalScore.toLocaleString();
            
            // Generate review for each question
            const reviewContainer = document.getElementById('questionsReview');
            reviewContainer.innerHTML = '';
            
            results.questions.forEach((q, index) => {
                const answer = results.answers[index];
                const isCorrect = answer.isCorrect;
                
                const reviewDiv = document.createElement('div');
                reviewDiv.className = `question-review ${isCorrect ? 'correct' : 'incorrect'}`;
                
                reviewDiv.innerHTML = `
                    <h3>Question ${index + 1}: ${q.question}</h3>
                    <p>Your Answer: ${answer.selectedAnswer}. ${q.options[['A','B','C','D'].indexOf(answer.selectedAnswer)]}</p>
                    <p>Correct Answer: ${answer.correctAnswer}. ${q.options[['A','B','C','D'].indexOf(answer.correctAnswer)]}</p>
                    <div class="answer-status ${isCorrect ? 'correct' : 'incorrect'}">
                        ${isCorrect ? ' Correct' : ' Incorrect'}
                    </div>
                `;
                
                reviewContainer.appendChild(reviewDiv);
            });
        }
    </script>
</body>
</html>
